{"version":3,"sources":["webpack:///./app/widget/index/Brand/ClientCheck/main.js"],"names":["App","props","onSearch","bl","setState","pageNo","dealername","state","bossid","takePeople","contact","memoDealername","oldSearch","getList","ajax","get","params","pageSize","then","response","dataList","data","page_info","linkSwitch","bmainCustomer","invitestatus","checkAll","selectedRowKeys","totalNum","catch","error","statusText","getColumn","module","setTableData","chSearchIpt","e","type","target","value","handleClearIconClick","formatColumn","arr","column","title","dataIndex","key","fixed","width","render","text","record","index","forEach","item","isChecked","fieldRequired","push","sort","a","b","fieldname","fieldvalue","fieldtype","moment","format","JSON","stringify","status_info","ClientDetail","current","onShow","id","info","info_type","verticalAlign","paddingRight","color","allStopConfirm","addModalStatus","clientNames","addClientChange","onSubClients","length","spinning","post","dealernameList","dbRepeateSet","insertSet","success","message","inviteLinkStatus","appLinkStatusStatus","appLinkStatus","inviteLinkSwitch","checked","invitecode","status","setTableStatus","num","oCheckitem","onSortList","onSortSubmit","ids","join","onTableCheckChange","changePagination","page","onPaginationSize","size","dealer_list","allStop","allRm","confirm","maskClosable","content","okText","cancelText","okButtonProps","className","cancelButtonProps","onOk","allRmConfirm","React","createRef","Component"],"mappings":"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","file":"js/chunk/242_2925d57657c0bb378eff.js","sourcesContent":["import Tpl from './tpl';\r\nimport { Modal, message,Divider, Menu, Dropdown, Icon,Tooltip } from 'antd';\r\nimport ajax from '../../../../js/common/ajax';\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.ClientDetail = React.createRef()\r\n        this.state = {\r\n            pageNo: 1,\r\n            pageSize: 10,\r\n            checkAll: false,\r\n            totalNum: 0,\r\n\r\n            dealername: null,\r\n            bossid: null,\r\n            takePeople: null,\r\n            contact: null,\r\n            memoDealername: null,\r\n\r\n            oldSearch:{\r\n                dealername: null,\r\n                bossid: null,\r\n                takePeople: null,\r\n                contact: null,\r\n                memoDealername: null,\r\n\r\n            },\r\n\r\n            spinning: false,\r\n            selectedRowKeys: [],\r\n            setTableStatus: false,\r\n            addModalStatus: false,\r\n            inviteLinkStatus: false,\r\n            appLinkStatus: false,\r\n            linkSwitch: false,\r\n            clientNames: [],\r\n            dataList: {}\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getList()\r\n        this.getColumn()\r\n    }\r\n    onSearch= (bl=false) =>{\r\n        this.setState({\r\n            pageNo:1,\r\n            dealername:   bl ? null : this.state.dealername,\r\n            bossid:   bl ? null : this.state.bossid,\r\n            takePeople:  bl ? null : this.state.takePeople,\r\n            contact:   bl ? null : this.state.contact,\r\n            memoDealername:  bl ? null : this.state.memoDealername,\r\n            oldSearch:{\r\n                dealername:   bl ? null : this.state.dealername,\r\n                bossid:   bl ? null : this.state.bossid,\r\n                takePeople:  bl ? null : this.state.takePeople,\r\n                contact:   bl ? null : this.state.contact,\r\n                memoDealername:  bl ? null : this.state.memoDealername,\r\n            },\r\n        },()=>{\r\n            this.getList()\r\n        })\r\n    }\r\n    getList = () => {\r\n        let { dealername, bossid, takePeople, contact, memoDealername } = this.state;\r\n        ajax.get('/hcm/dealer/getlist', {\r\n            params: {\r\n                pageNo: this.state.pageNo,\r\n                pageSize: this.state.pageSize,\r\n                dealername: dealername,\r\n                bossid: bossid,\r\n                takePeople: takePeople,\r\n                contact: contact,\r\n                memoDealername: memoDealername,\r\n            }\r\n        }).then((response) => {\r\n            let dataList = response.data.data;\r\n            this.setState({\r\n                dataList: dataList,\r\n                pageNo: dataList.page_info.pageNo,\r\n                pageSize: dataList.page_info.pageSize,\r\n                linkSwitch: dataList.bmainCustomer.invitestatus == '0' ? false : true,\r\n                checkAll: false,\r\n                selectedRowKeys: [],\r\n                totalNum: dataList.page_info.totalNum,\r\n            })\r\n\r\n        }).catch((error) => {\r\n            message.error(error.statusText);\r\n        });\r\n    }\r\n    getColumn = () => {\r\n        ajax.get('/hcm/hcmCustomModel/getBybmcidAndModule', {\r\n            params: {\r\n                module: 'DEALER',\r\n            }\r\n        }).then((response) => {\r\n            this.setState({\r\n                setTableData: response.data.data\r\n            })\r\n\r\n        }).catch((error) => {\r\n            message.error(error.statusText);\r\n        });\r\n    }\r\n    chSearchIpt = (e, type) => {\r\n        let state = this.state;\r\n        state[type] = e.target.value;\r\n        this.setState(state)\r\n\r\n    }\r\n    handleClearIconClick =  (type) => {\r\n        let state = this.state;\r\n        state[type] = null;\r\n        this.setState(state);\r\n    }\r\n    formatColumn = () => {\r\n        let arr = []\r\n        let column = [{\r\n            title: 'No',\r\n            dataIndex: 'index',\r\n            key: 'index',\r\n            fixed: 'left',\r\n            width:'80px',\r\n            render: (text, record, index) => <div style={{width:'80px'}}>{index + 1}</div>\r\n        }]\r\n        let data = this.state.setTableData;\r\n        for (const key in data) {\r\n            data[key].data.forEach((item, index) => {\r\n                if (item.isChecked) {\r\n                    item.target = [key, index, item.fieldRequired]\r\n                    return (\r\n                        arr.push(item)\r\n                    )\r\n                }\r\n\r\n            })\r\n        }\r\n        arr.sort((a, b) => a.sort - b.sort)\r\n        arr.forEach((item, index) => {\r\n            column.push({\r\n                title: item.fieldname,\r\n                dataIndex: item.fieldvalue,\r\n                key: item.fieldvalue,\r\n                \r\n                render: (text, record, index) => {\r\n\r\n                    return (\r\n                        item.fieldtype == 'DATE' ?\r\n                            text ? moment(text).format('YYYY-MM-DD') : text\r\n                            :\r\n                            (item.fieldvalue === 'dealername' ?\r\n                                \r\n                                    \r\n                                    JSON.stringify(record.status_info) == '{}' ?\r\n                                        <a className='tab-a-text' onClick={()=>this.ClientDetail.current.onShow(record.id)}>{text}</a>\r\n                                        :\r\n                                        <div>\r\n                                            <a onClick={()=>this.ClientDetail.current.onShow(record.id)}>{text}</a>\r\n                                            <Tooltip placement=\"bottom\" title={record.status_info.info}>\r\n                                            <span className={record.status_info.info_type}>{record.status_info.title}</span>\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                :\r\n                                \r\n                                <div className='table-tb-box'>\r\n                                    <Tooltip placement=\"bottom\" title={text}>\r\n                                        {text}\r\n                                    </Tooltip>\r\n                                </div>\r\n                            )\r\n                    )\r\n                }\r\n\r\n            })\r\n        })\r\n        column.push({\r\n            title: <div className='action'>\r\n                <span>操作</span>\r\n                \r\n            </div>,\r\n            key: 'action',\r\n            fixed: 'right',\r\n            width:'160px',\r\n            render: (text, record, index) => (\r\n                <div className='action'>\r\n                    <a href={`/index.html#/CustomerEditor/${record.id}`}>\r\n                        <img style={{verticalAlign:'text-bottom',paddingRight:'4px'}} src='../../../img/icon/icon_operating_edit.png' />\r\n                        编辑\r\n                    </a>\r\n                    <Divider type=\"vertical\" />\r\n                    <Dropdown overlay={<Menu>\r\n                        <Menu.Item>\r\n                            <a className='A-COLOR' href={`/index.html#/ChangeHistorys/DEALER/${record.dealername}/${record.id}`}>\r\n                            <img style={{verticalAlign:'text-bottom',paddingRight:'4px'}} src='../../../img/icon/icon_operating_history.png' />\r\n                            变更历史\r\n                            </a>\r\n                        </Menu.Item>\r\n                        <Menu.Item>\r\n                            <a className='A-COLOR' style={{color:'#1890ff'}} onClick={() => this.allStopConfirm('item', record.id)}>\r\n                            <img style={{verticalAlign:'text-bottom',paddingRight:'4px'}} src='../../../img/icon/icon_operating_Release.png' />\r\n                            解约\r\n                            </a>\r\n                        </Menu.Item>\r\n                        {/* <Menu.Item>\r\n                            <a onClick={() => this.allRmConfirm('item', record.id)}>删除</a>\r\n                        </Menu.Item> */}\r\n                    </Menu>}>\r\n                        <a className=\"ant-dropdown-link\">\r\n                            ···&nbsp;更多\r\n                        </a>\r\n                    </Dropdown>\r\n                </div>\r\n            )\r\n        })\r\n        return column\r\n    }\r\n    addModalStatus = (bl) => {\r\n        this.setState({\r\n            addModalStatus: bl,\r\n            clientNames: [],\r\n        })\r\n    }\r\n    addClientChange = (value) => {\r\n        this.setState({\r\n            clientNames: value\r\n        })\r\n    }\r\n    onSubClients = () => {\r\n        if(this.state.clientNames.length > 300){\r\n            message.error(\r\n                <span>客户名称数量每次最多添加300个！当前数量为<span>{this.state.clientNames.length}</span></span>\r\n            )\r\n            return\r\n        }\r\n        this.setState({\r\n            spinning: true\r\n        }, () => {\r\n            ajax.post('/hcm/dealer/create', {\r\n                dealernameList: JSON.stringify(this.state.clientNames)\r\n            }).then((response) => {\r\n                if(response.data.data.dbRepeateSet.length){\r\n                    response.data.data.dbRepeateSet.forEach(item=>{\r\n                        message.error(`已有名为${item}的客户，请勿重复添加`);\r\n                    })\r\n                }else{\r\n                    this.setState({\r\n                        clientNames:[]\r\n                    })\r\n                }\r\n                this.setState({\r\n                    spinning: false,\r\n                    addModalStatus: false,\r\n                    \r\n                }, () => {\r\n                    this.getList()\r\n                    if(response.data.data.insertSet.length){\r\n                        message.success(response.data.message)\r\n                    }\r\n                })\r\n            }).catch((error) => {\r\n\r\n                this.setState({\r\n                    spinning: false\r\n                })\r\n                message.error(error.statusText);\r\n            });\r\n        })\r\n    }\r\n    //---\r\n    inviteLinkStatus = (bl) => {\r\n        this.setState({\r\n            inviteLinkStatus: bl\r\n        })\r\n    }\r\n    appLinkStatusStatus = (bl) => {\r\n        this.setState({\r\n            appLinkStatus: bl\r\n        })\r\n    }\r\n    inviteLinkSwitch = (checked) => {\r\n        this.setState({\r\n            linkSwitch: checked\r\n        }, () => {\r\n            ajax.get('/hcm/cus/changeInviteStatus', {\r\n                params: {\r\n                    invitecode: this.state.dataList.bmainCustomer.invitecode,\r\n                    status: this.state.linkSwitch ? 1 : 0,\r\n                }\r\n            }).then((response) => {\r\n                this.getList()\r\n            }).catch((error) => {\r\n                message.error(error.statusText);\r\n            });\r\n        })\r\n    }\r\n\r\n    setTableStatus = (bl) => {\r\n        this.setState({\r\n            setTableStatus: bl\r\n        }, () => {\r\n            if (bl == false) {\r\n                this.getColumn()\r\n            }\r\n\r\n        })\r\n    }\r\n    num = 100\r\n    oCheckitem = (e, key, item, index) => {\r\n        let setTableData = this.state.setTableData;\r\n        setTableData[key].data[index].isChecked = e.target.checked ? 1 : 0;\r\n        setTableData[key].data[index].sort = this.num++\r\n        this.setState({\r\n            setTableData: setTableData\r\n        })\r\n    }\r\n    onSortList = (data) => {\r\n        this.setState({\r\n            setTableData: data\r\n        })\r\n    }\r\n    onSortSubmit = (data) => {\r\n        let arr = [];\r\n        data.forEach((item, index) => { arr.push(item.id) })\r\n        this.setState({\r\n            spinning: true\r\n        }, () => {\r\n            ajax.get('/hcm/hcmCustomModel/saveSort', {\r\n                params: {\r\n                    ids: arr.join(','),\r\n                    module: 'DEALER'\r\n                }\r\n            }).then((response) => {\r\n                if (response.data.status == '10000') {\r\n                    this.getColumn()\r\n                    this.setTableStatus(false)\r\n                }\r\n\r\n                this.setState({\r\n                    spinning: false\r\n                })\r\n\r\n            }).catch((error) => {\r\n                this.setState({\r\n                    spinning: false\r\n                })\r\n                message.error(error.statusText);\r\n            });\r\n        })\r\n\r\n    }\r\n    onTableCheckChange = (selectedRowKeys) => {\r\n        // console.log(selectedRowKeys)\r\n        this.setState({\r\n            selectedRowKeys: selectedRowKeys,\r\n            checkAll: false\r\n        });\r\n    }\r\n\r\n    changePagination = (page, pageSize) => {\r\n        this.setState({\r\n            pageNo: page,\r\n            pageSize: pageSize,\r\n        }, () => {\r\n            this.getList()\r\n        })\r\n    }\r\n    onPaginationSize = (current, size) => {\r\n        this.setState({\r\n            pageNo: 1,\r\n            pageSize: size,\r\n        }, () => {\r\n            this.getList()\r\n        })\r\n    }\r\n    checkAll = (bl) => {\r\n        let selectedRowKeys = this.state.selectedRowKeys;\r\n        if (bl) {\r\n            this.state.dataList.dealer_list.forEach((item, index) => {\r\n                selectedRowKeys.push(item.id)\r\n            })\r\n\r\n        } else {\r\n            selectedRowKeys = []\r\n        }\r\n        this.setState({\r\n            checkAll: bl,\r\n            selectedRowKeys: selectedRowKeys\r\n        })\r\n    }\r\n    allStop = (type, id) => {\r\n        let { selectedRowKeys, checkAll } = this.state;\r\n\r\n        let params = {}\r\n        if (type == 'all') {\r\n            let { dealername, bossid, takePeople, contact, memoDealername } = this.state.oldSearch;\r\n            \r\n            params = {\r\n                ids : selectedRowKeys.join(','),\r\n                checkAll : checkAll,\r\n                dealername:   !checkAll ? null : dealername,\r\n                bossid:   !checkAll ? null : bossid,\r\n                takePeople:  !checkAll ? null : takePeople,\r\n                contact:   !checkAll ? null : contact,\r\n                memoDealername:  !checkAll ? null : memoDealername,\r\n                \r\n            }\r\n        } else {\r\n            params.ids = id\r\n            params.checkAll = false\r\n        }\r\n\r\n        this.setState({\r\n            spinning: true\r\n        }, () => {\r\n            ajax.get('/hcm/dealer/stop', {\r\n                params: params\r\n            }).then((response) => {\r\n\r\n                this.setState({\r\n                    spinning: false,\r\n                    selectedRowKeys:[]\r\n                }, () => {\r\n                    message.success(response.data.message);\r\n                    if (response.data.status == '10000') {\r\n                        this.getColumn()\r\n                        this.onSearch(true)\r\n                    }\r\n                })\r\n\r\n            }).catch((error) => {\r\n                this.setState({\r\n                    spinning: false\r\n                })\r\n                message.error(error.statusText);\r\n            });\r\n        })\r\n\r\n    }\r\n\r\n    allRm = (type, id) => {\r\n        let { selectedRowKeys, checkAll } = this.state;\r\n        let params = {}\r\n        if (type == 'all') {\r\n            params.ids = selectedRowKeys.join(',')\r\n            params.checkAll = checkAll\r\n        } else {\r\n            params.ids = id\r\n            params.checkAll = false\r\n        }\r\n\r\n        this.setState({\r\n            spinning: true\r\n        }, () => {\r\n            ajax.get('/hcm/dealer/delete', {\r\n                params: params\r\n            }).then((response) => {\r\n                this.setState({\r\n                    spinning: false\r\n                }, () => {\r\n\r\n                    if (response.data.status == '10000') {\r\n                        this.getColumn()\r\n                        this.getList()\r\n                    }\r\n                    message.success(response.data.message);\r\n                })\r\n\r\n            }).catch((error) => {\r\n                this.setState({\r\n                    spinning: false\r\n                })\r\n                message.error(error.statusText);\r\n            });\r\n        })\r\n\r\n    }\r\n    allStopConfirm = (type, id) => {\r\n        let { checkAll, totalNum, selectedRowKeys } = this.state;\r\n        if (!selectedRowKeys.length && type == 'all') {\r\n            message.error('至少选择一条');\r\n            return\r\n        }\r\n        Modal.confirm({\r\n            title: null,\r\n            maskClosable: false,\r\n            content: type == 'all' ?\r\n                <div>\r\n                    <div className='tips'>提示</div>\r\n                    <div className='pline'></div>\r\n                    <p className='Dtitle'>你确认要将勾选的<span className='red'>{checkAll ? totalNum : selectedRowKeys.length}</span>项客户移入解约吗？</p>\r\n                    <p>解约后<span className='red'>将与客户取消合作关系</span></p>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <div className='tips'>提示</div>\r\n                    <div className='pline'></div>\r\n                    <p className='Dtitle'>你确认要将该客户移入解约吗</p>\r\n                    <p>解约后<span className='red'>将与客户取消合作关系</span></p>\r\n                </div>,\r\n            okText: '确定',\r\n            cancelText: '取消',\r\n            okButtonProps: {className:'btn2-main'},\r\n            cancelButtonProps: {className: 'btn2-sub'},\r\n            className:'alert-item-confirm',\r\n            onOk: () => this.allStop(type, id),\r\n        });\r\n    }\r\n    allRmConfirm = (type, id) => {\r\n        let { checkAll, totalNum, selectedRowKeys } = this.state;\r\n        if (!selectedRowKeys.length && type == 'all') {\r\n            message.error('至少选择一条');\r\n            return\r\n        }\r\n        Modal.confirm({\r\n            title: null,\r\n            maskClosable: false,\r\n            content: type == 'all' ?\r\n                <div>\r\n                    <div className='tips'>提示</div>\r\n                    <div className='pline'></div>\r\n                    <p>你确认要删除勾选的<span className='red'>{checkAll ? totalNum : selectedRowKeys.length}</span>项客户信息吗</p>\r\n                    <p>删除后<span className='red'>相关客户信息将无法找回</span></p>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <div className='tips'>提示</div>\r\n                    <div className='pline'></div>\r\n                    <p>你确认要删除该客户信息吗？</p>\r\n                    <p>删除后<span className='red'>相关客户信息将无法找回</span></p>\r\n                </div>,\r\n            okText: '确定',\r\n            cancelText: '取消',\r\n            className:'alert-item-confirm YellowWhite',\r\n            onOk: () => this.allRm(type, id),\r\n        });\r\n    }\r\n    render() {\r\n        return <Tpl that={this} />\r\n    }\r\n}\r\nexport default App;\r\n"],"sourceRoot":""}